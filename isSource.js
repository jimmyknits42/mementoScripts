/**
 * REQUIRED OTHER LIBRARIES
 *   moment.js
 *   booleanOps.js
 *   entries.js
 */

/**
 * EXPECTED FIELDS
 *   "Location" - [GEO] - geoposition to indicate where the entry was recorded
 *   "Test" - [BL] - boolean to indicate that all durations have finished
 */

/**
 * createSourceEntry
 * Creates and persists a Source entry for the entry parameter
 * This is for the AfterSaveOnCreate script for an entry that should have a corresponding Source entry
 * 
 * @param {entry} e - entry to create a Source entry for
 * @param {String} fieldName - name of the field in the Source library to fill
 *
 * @returns {entry}
 */
function createSourceEntry(e, fieldName) {
  //get Source library
  var sourceLib = libByName("Source");
  //get create moment
  var createMoment = moment().valueOf();
  //construct temp Source entry 
  var tmpSource = new Object();
  //populate details
  tmpSource["Timestamp"] = createMoment;
  tmpSource["EntryRecordedAtLocation"] = e.field("Location");
  tmpSource["EntryBeganMoment"] = createMoment;
  tmpSource["EntrySavedMoment"] = createMoment;
  tmpSource["EntryLastUpdatedMoment"] = createMoment;
  tmpSource["Test"] = e.field("Test");
  tmpSource["AutoGenerated"] = "Yes";
  //persist Source entry
  var sourceEntry = sourceLib.create(tmpSource);
  //link entry paramter to Source entry
  sourceEntry.link(fieldName, e);
  //return persisted Source entry
  return sourceEntry;
}

/**
 * deleteAutoGeneratedSourceEntry
 * Finds and deletes the entry in the Source library that links to the entry parameter
 * This is for the AfterSaveOnCreate script for the Source library
 * Use Case: 
 *   (1) start create Source entry 
 *   (2) create isSource entry 
 *   (3) corresponding Source entry is autogenerated 
 *   (4) finish create Source entry
 * Need to delete the autogenerated Source entry so that there aren't duplicates.
 * It's okay to do that because the autogenerated Source entry can't have been used by anything yet.
 *
 * @param {entry} e - isSource entry to find and delete corresponding autogenerated Source entry for
 *
 * @returns {boolean}
 */
function deleteAutoGeneratedSourceEntry(e) {
  //initialize
  var entryToDelete = null;
  var sourceLib = libByName("Source");

  //FILTER
  //1 - filter to entries linked to entry parameter
  var qryRes1 = sourceLib.linksTo(e);
  //2 - filter to entries where AutoGenerated is true
  var qryRes2 = [];
  //for each entry in the first query result
  for (var i = 0; i < qryRes1.length; i++) {
    //if the AutoGenerated field is true for the currentEntry
    if (qryRes1[i].field("AutoGenerated")) {
      //add the currentEntry to the query result
      qryRes2.push(qryRes1[i]);
    }
  }
  //3 - filter the most recently created entry
  entryToDelete = getMaximalEntry(qryRes2, "Timestamp");

  //if there is an entry found
  if(isnotNNU(entryToDelete)) {
    //delete the entry
    entryToDelete.trash();
    //return true because it an entry was successfully found and deleted
    return true;
  }
  else {
    //otherwise return false, an entry was not found
    return false;
  }
}


































